import subprocess
import sys
import zlib
from pathlib import Path

assert sys.version_info >= (3, 5)

Import("env")

log_format_text = (Path("src") / "log_format.h").read_text()
sensor_data_text = (Path("src") / "sensor_data.h").read_text(errors="replace")

git_command = ["git", "log", "-n", "1", "--pretty=format:%H"]
git_hash = subprocess.run(git_command, stdout=subprocess.PIPE).stdout.decode('utf-8')
git_hash = git_hash[:-1]  # get rid of trailing new line

checksum = zlib.crc32((log_format_text + sensor_data_text).encode("utf-8"))

git_command = ["git", "describe", "--always", "--dirty", "--match", "\"[0-9]*.*\""]
git_hash_string = subprocess.run(git_command, stdout=subprocess.PIPE).stdout.decode('utf-8')
##define GIT_HASH_STRING "{git_hash_string.strip()}"
file = f"""\
// autogenerated on build by applying crc32 on the concatenation of log_format.h and sensor_data.h
#define LOG_CHECKSUM (0x{checksum:08x})
"""

with Path("src/log_checksum.h").open("w") as checksum_file:
    checksum_file.write(file)

with Path("src/git_hash.h").open("w") as git_hash_file:
    file_content = f"""\
    #pragma once
    #define GIT_HASH_STRING "{git_hash_string.strip()}"
    """
    git_hash_file.write(file_content)

import subprocess
import sys
import zlib
from pathlib import Path

assert sys.version_info >= (3, 5)

Import("env")

log_format_text = (Path("src") / "log_format.h").read_text()
sensor_data_text = (Path("src") / "sensor_data.h").read_text(errors="replace")

git_command = ["git", "log", "-n", "1", "--pretty=format:%H"]
git_hash = subprocess.run(git_command, stdout=subprocess.PIPE).stdout.decode('utf-8')
git_hash = git_hash[:-1]  # get rid of trailing new line

checksum = zlib.crc32((log_format_text + sensor_data_text).encode("utf-8"))

file = f"""\
// autogenerated on build by applying crc32 on the concatenation of log_format.h and sensor_data.h
#define LOG_CHECKSUM (0x{checksum:08x})
"""

with Path("src/log_checksum.h").open("w") as checksum_file:
    checksum_file.write(file)

def extra_http_configuration(env, node):
    path = node.get_path().removeprefix(env["PROJECT_BUILD_DIR"]).replace("\\", "/").removeprefix("/" + env["PIOENV"])

    if path.startswith("/Framework"):
        return env.Object(
            node,
            CCFLAGS=env["CCFLAGS"] + ["-w"]
        )
    elif path.startswith("/src/"):
        return env.Object(
            node,
            CCFLAGS=env["CCFLAGS"] + ["-Wall", "-Wextra", "-Wno-unused-function"]
        )
    else:
        return env.Object(
            node,
            CCFLAGS=env["CCFLAGS"] + "-Wno-cpp"
        )

env.AddBuildMiddleware(extra_http_configuration)
